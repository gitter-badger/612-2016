// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "BreachRoughTerrain.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

BreachRoughTerrain::BreachRoughTerrain() :
		Command()
{
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drivetrain.get());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

	timer = new Timer(); //initializing (we declared in .h)
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void BreachRoughTerrain::Initialize()
{
	timer->Start(); //immediately starts timer
}

// Called repeatedly when this Command is scheduled to run
void BreachRoughTerrain::Execute()
{
	if(timer->Get() < 3)    //gets timer in secs then goes to check if it's <3 and then do the stuff below
	{
		Robot::drivetrain->cANTalon1->Set(1.0f);  //if it is <3, then it sets motors at 1 (full speed)
		Robot::drivetrain->cANTalon2->Set(1.0f);
		Robot::drivetrain->cANTalon3->Set(1.0f);
		Robot::drivetrain->cANTalon4->Set(1.0f);
	}
	else if(timer->Get() >= 3)
	{
		Robot::drivetrain->cANTalon1->Set(0.0f);
		Robot::drivetrain->cANTalon2->Set(0.0f);
		Robot::drivetrain->cANTalon3->Set(0.0f);
		Robot::drivetrain->cANTalon4->Set(0.0f);
	}
}

// Make this return true when this Command no longer needs to run execute()
bool BreachRoughTerrain::IsFinished()
{
	if(timer->Get() >= 4) //like a buffer zone, if it's been 4 secs or longer it's def. done
	{
		return true; //if timer reaches 4secs, then it moves to End
	}
	else
	{
		return false; //if its not, then it returns false, as in its not 3 secs yet
	}
}

// Called once after isFinished returns true
void BreachRoughTerrain::End() //purpose of end is to tell what to do when its done
{
	Robot::drivetrain->cANTalon1->Set(0.0f); //if done, stop motors
	Robot::drivetrain->cANTalon2->Set(0.0f);
	Robot::drivetrain->cANTalon3->Set(0.0f);
	Robot::drivetrain->cANTalon4->Set(0.0f);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void BreachRoughTerrain::Interrupted()
{
	std::printf("ERROR: BreachRoughTerrain interrupted!"); //tells driver theres an error

	Robot::drivetrain->cANTalon1->Set(0.0f); //if there is an error, stop motors
	Robot::drivetrain->cANTalon2->Set(0.0f);
	Robot::drivetrain->cANTalon3->Set(0.0f);
	Robot::drivetrain->cANTalon4->Set(0.0f);
}
